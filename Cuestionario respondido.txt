¿Qué hace el comando git init y en qué situaciones se utiliza? se utiliza para inicializar un repositorio de Git en un directorio.
 Crea un nuevo repositorio vacío donde se pueden empezar a rastrear los cambios de archivos. Se usa cuando se quiere convertir 
un proyecto o carpeta existente en un repositorio Git o al comenzar un nuevo proyecto desde cero.
R=Git init se utiliza para inicializar un repositorio Git en un directorio. Inicializa un nuevo repositorio vacío donde se pueden empezar a hacer un seguimiento de los cambios en los archivos. Se utiliza cuando se necesita convertir un proyecto o carpeta actual en un repositorio Git o cuando se inicia un nuevo proyecto desde cero.

¿Cuál es la diferencia entre git add y git commit en el flujo de trabajo de Git? git add prepara los archivos.
git commit guarda los cambios en el historial.
R=Git add prepara los archivos, es decir, coloca los archivos modificados en el área de preparación (staging area) para que sean parte del siguiente commit.
Git commit guarda los cambios en el historial del repositorio, creando un nuevo commit con los archivos que están en el área de preparación

¿Que significa que un archivo este en estado "stage" en Git y como se coloca en este estado?Un archivo en estado "stage" en Git significa que está preparado para ser 
incluido en el próximo commit. Para poner un archivo en este estado, usas el comando git add.
R=Un archivo en el estado "stage" significa que está listo para ser agregado al siguiente commit. Lo ponemos allí con la instrucción git add. Esto le dice a Git que debe ser sensible a los cambios hechos en este archivo.

¿Cuál es la diferencia entre git reset --soft, git reset --mixed y git reset --hard?  --soft: Deshace commit, mantiene en staging.
--mixed: Deshace commit, quita de staging.
--hard: Deshace commit, elimina cambios.
R
- --soft: Deshace el commit pero mantiene los archivos en el área de preparación (staging), es decir, los cambios siguen listos para ser committeados de nuevo.
- --mixed: Deshace el commit y elimina los archivos del área de preparación (staging), pero conserva los cambios en el directorio de trabajo.
- --hard: Abandona el commit y elimina los cambios tanto de la zona de preparación como del directorio de trabajo, sobrescribiendo el estado de los archivos al último commit válido.

¿Qué es una fusión (merge) en Git y cuáles son los posibles conflictos que pueden ocurrir durante el proceso? Una fusión (merge) en Git es el proceso de combinar dos ramas 
diferentes en una sola. Esto se hace para integrar los cambios realizados en ambas ramas.
R=Una fusión (merge) en Git es el acto de unificar dos ramas distintas en una. Lo realizamos para unir los cambios hechos en estas dos ramas.

Conflictos que pueden ocurrir:
-Conflictos de contenido: Se producen cuando dos ramas editan la misma línea de un archivo. Git no puede determinar qué versión mantener, así que se requiere de intervención manual para solucionarlo.
-Eliminación conflicts: Si hay un archivo eliminado en un branch y alguien lo edita en otro branch, Git no sabe qué hacer con él y se tiene que resolver por hand.

¿Para qué se usa el comando git checkout y cuál es su diferencia con git switch? El comando git checkout se usa para cambiar de rama o restaurar archivos a su estado anterior.
R=Git checkout: To change between branches or switch files back to their original state. It is a more versatile command, but can be unclear in usage.
Git switch*: A newer and more specialized version of git checkout, only for changing between branches. Simplifies the process and makes it easier to understand.
Diferencias con git switch:

Git checkout: Cambia de rama o restaura archivos. Es más versátil, pero puede ser confuso.
Git switch: Es una versión más específica y moderna de git checkout, diseñada solo para cambiar de rama, haciendo el proceso más claro y fácil de entender.


¿Cómo funciona git pull y en qué se diferencia de git fetch? El comando git pull y git fetch están relacionados con la sincronización de tu repositorio local con un
 repositorio remoto, pero funcionan de manera diferente.
R=Git fetch: Pulls the changes from the remote repository but does not make any modification in your local branch. It merely refreshes the remote branch data.
Git pull: Pulls and automatically merges the changes from the remote repository into your local branch, updating it right away.

Diferencias clave:

git fetch solo descarga los cambios del repositorio remoto, pero no hace ninguna modificación en tu rama local.
git pull descarga y fusiona automáticamente esos cambios con tu rama local, actualizándola de inmediato.


¿Qué ocurre cuando se ejecuta git push y qué problemas pueden surgir si hay cambios en el repositorio remoto? Cuando ejecutas git push, envías tus cambios locales al 
repositorio remoto. Si hay cambios en el remoto que no tienes, el push puede ser rechazado. En este caso, debes hacer un git pull primero para traer esos cambios y luego 
hacer el push nuevamente.
R=Cuando ejecutas git push, envías tus cambios locales al repositorio remoto. Si hay cambios en el repositorio remoto que no tienes en tu rama local, el push puede ser rechazado. En este caso, debes hacer un git pull primero para traer esos cambios y luego hacer el git push nuevamente para sincronizar tu rama local con el remoto.

¿Cuál es la diferencia entre git clone y git init?La diferencia entre git clone y git init es:
R=Git clone: Para clonar un repositorio remoto completo (con todo su historial y ramas) en su sistema local.
Git init: Para inicializar un repositorio nuevo y vacío en su directorio local sin historial ni contenido, para comenzar a trabajar en un proyecto desde el principio.

git clone: Se usa para copiar un repositorio remoto completo (incluyendo todo su historial y ramas) a tu máquina local.

git init: Se usa para inicializar un nuevo repositorio vacío en tu directorio local, sin contenido ni historial, para empezar a trabajar en un proyecto.

Flujo de trabajo en Git